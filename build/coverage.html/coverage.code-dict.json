{"/home/travis/build/npmtest/node-npmtest-instagram-realtime/test.js":"/* istanbul instrument in package npmtest_instagram_realtime */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-instagram-realtime/lib.npmtest_instagram_realtime.js":"/* istanbul instrument in package npmtest_instagram_realtime */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_instagram_realtime = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_instagram_realtime = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-instagram-realtime/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-instagram-realtime && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_instagram_realtime */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_instagram_realtime\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_instagram_realtime.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_instagram_realtime.rollup.js'] =\n            local.assetsDict['/assets.npmtest_instagram_realtime.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_instagram_realtime.__dirname +\n                    '/lib.npmtest_instagram_realtime.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-instagram-realtime/node_modules/instagram-realtime/libs/InstagramStream.js":"// External dependencies\nvar connect = require('connect');\nvar events  = require('events');\nvar util    = require('util');\nvar url     = require('url');\n// Internal dependencies\nvar SubscriptionManager = require('./SubscriptionManager.js');\nvar MediaFetcher        = require('./MediaFetcher.js');\n\n// Inheritance\nutil.inherits(InstagramStream, events.EventEmitter);\n\n/**\n * InstagramStream Object\n * Creates an InstagramStream usable with triggers\n * @param {!Server} server  a Node HTTP server or Express App()\n * @param {object}  opts    options object\n */\nfunction InstagramStream (server, opts) {\n  if (!(this instanceof InstagramStream)) {\n    return new InstagramStream(server, opts);\n  }\n\n  // Call super constructor\n  events.EventEmitter.call(this);\n\n  // Shift over parameters, if there is no server in the first slot\n  if (typeof server === 'object' && typeof server.listen !== 'function') {\n    server  = null;\n    opts    = server;\n  }\n\n  opts = opts || {};\n\n  // Warn user about invalid options\n  if (!opts.client_id) {\n    console.log('Invalid \"client_id\"'.yellow);\n  }\n  if (!opts.client_secret) {\n    console.log('Invalid \"client_secret\"'.yellow);\n  }\n  if (!opts.url) {\n    console.log('Invalid \"url\"'.yellow);\n  }\n  if (!opts.callback_path) {\n    console.log('Invalid \"callback_path\"'.yellow);\n  }\n\n  // Create object\n  this.client_id      = opts.client_id;\n  this.client_secret  = opts.client_secret;\n  this.callback_url   = opts.url + '/' + opts.callback_path;\n  this.url            = opts.url;\n  this.callback_path  = opts.callback_path;\n\n  this.last = {};\n  this.last.response  = undefined;\n  this.last.body      = undefined;\n  this.last_body      = undefined;    // TODO: Remove this\n\n  // Defaults\n  this.callback_path = this.callback_path ? this.callback_path : 'callback';\n  var self = this;\n\n  var _sub = new SubscriptionManager({\n    parent  : this,\n    client_id     : this.client_id,\n    client_secret : this.client_secret,\n    callback_url  : this.callback_url\n  });\n\n  var _fetch = new MediaFetcher({\n    parent  : this,\n    client_id     : this.client_id,\n    client_secret : this.client_secret,\n    callback_url  : this.callback_url\n  });\n\n  // Route '/:callback' -> custom handlers\n  ~function () {\n    var listeners = server.listeners('request');\n\n    var chain = connect();\n\n    chain.use(connect.bodyParser());\n\n    chain.use(function (req, resp, next) {\n      var pathname = url.parse(req.url).pathname;\n      if (req.method === 'GET' && pathname === '/' + self.callback_path) {\n        var hub_challenge = url.parse(req.url, true).query['hub.challenge'];\n        resp.writeHead(200, { 'Content-Type': 'text/plain;charset=utf-8' });\n        resp.end(hub_challenge ? hub_challenge : '🍕');\n      }\n      else if (req.method === 'POST' && pathname === '/' + self.callback_path) {\n        resp.writeHead(200, { 'Content-Type': 'text/plain;charset=utf-8' });\n        resp.end('🍕');\n        route_traffic(req.body, req);\n      }\n      else {\n        next();\n      }\n    });\n\n    chain.use(function (req, resp) {\n      for (var k = 0; k < listeners.length; k++) {\n        listeners[k].call(server, req, resp);\n      }\n    });\n\n    server.removeAllListeners('request');\n    server.on('request', chain);\n  }();\n\n  this.subscribe = function (term) {\n    // Contains subscription to users\n    if (typeof term.user !== 'undefined' && term.user) {\n      _sub.subscribe_user();\n    }\n    // Contains subscription to tag\n    if (typeof term.tag === 'string' && term.tag !== '') {\n      _sub.subscribe_tag(term.tag);\n    }\n    // Contains subscription to location-id\n    if ((typeof term.location === 'number' || typeof term.location === 'string') && term.location !== '') {\n      _sub.subscribe_location(term.location);\n    }\n    // Contains subscription to geography coordinates\n    if (typeof term.lat === 'number' && typeof term.lng === 'number' && typeof term.radius === 'number') {\n      _sub.subscribe_geography(term.location);\n    }\n  };\n\n  this.unsubscribe = function (id) {\n    id = id || 'all';\n    _sub.unsubscribe(id);\n  }\n  /**\n   * Request a Media Search from Instagram Based on an HTTP-Request\n   * ~~~\n   * @param {!Request Body} body an HTTP-request from the InstagramAPI containing\n   * object-id and subscription-id information. This can determine which type of\n   * subscription was sent, and what its purpose was.\n   */\n  function route_traffic (body) {\n    for (var k = 0; k < body.length; k++) {\n      route_individual_media_response(body[k]);\n    }\n  }\n\n  function route_individual_media_response (result) {\n    var sub_type = result.object;\n    var sub_id = result.subscription_id;\n    var obj_id = result.object_id;\n\n    if (!(sub_id && obj_id)) {\n      console.log('bad result... this seems like an Instagram API problem');\n      console.log('sub_id = ' + sub_id);\n      console.log('obj_id = ' + obj_id);\n    }\n\n    switch (sub_type) {\n    case 'user':\n      console.log('routing user-media traffic');\n      console.log('NOTE: this is *not* implemented');\n      _fetch.get_user();\n      break;\n\n    case 'tag':\n      _fetch.get_tag(obj_id);\n      break;\n\n    case 'location':\n      _fetch.get_location(obj_id);\n      break;\n\n    case 'geography':\n      _fetch.get_geography(obj_id);\n      break;\n\n    default:\n      console.log('bad media update');\n      return;\n    }\n  }\n}\n\n// LISTEN = CONSTRUCTOR\nInstagramStream.prototype.listen = InstagramStream;\n\n\n// Exports\nmodule.exports = InstagramStream;\n","/home/travis/build/npmtest/node-npmtest-instagram-realtime/node_modules/instagram-realtime/libs/SubscriptionManager.js":"var request = require('request');\nvar connect = require('connect');\nvar url = require('url');\n\n/**\n * SubscriptionManager\n * Helps with Instagram Subscriptions\n */\nfunction SubscriptionManager (params) {\n  this.parent = params.parent;\n  this.server = params.server;\n  this.client_id      = params.client_id;\n  this.client_secret  = params.client_secret;\n  this.callback_url   = params.callback_url;\n  var self = this;\n\n  this.subscribe_handler = function (error, resp, body) {\n    if (resp.statusCode === 200) {\n      self.parent.emit('subscribe', resp, body);\n    }\n    else {\n      self.parent.emit('subscribe/error', error, resp, body);\n    }\n  };\n\n  this.unsubscribe_handler = function (error, resp, body) {\n    if (resp.statusCode === 200) {\n      self.parent.emit('unsubscribe', resp, body);\n    }\n    else {\n      self.parent.emit('unsubscribe/error', error, resp, body);\n    }\n  };\n}\n\n/**\n * Subscribe to Users\n * Send an HTTP POST-request to the Instagram API, requesting a realtime\n * subscription to the full set of authenticated to the app.\n * @return {undefined} undefined\n */\nSubscriptionManager.prototype.subscribe_user = function () {\n  'use strict';\n  var url = 'https://api.instagram.com/v1/subscriptions/';\n  var data = {\n    client_id     : this.client_id,\n    client_secret : this.client_secret,\n    object        : 'user',\n    aspect        : 'media',\n    callback_url  : this.callback_url\n  };\n  request.post(url, { form : data }, this.subscribe_handler);\n};\n\n/**\n * Subscribe to a Hashtag\n * Send an HTTP POST-request to the Instagram API, requesting a realtime\n * subscription to a specific hashtag.\n * @param {string} tag a hashtag\n * @return {undefined} undefined\n */\nSubscriptionManager.prototype.subscribe_tag = function (tag) {\n  'use strict';\n  var url = 'https://api.instagram.com/v1/subscriptions/';\n  var data = {\n    client_id     : this.client_id,\n    client_secret : this.client_secret,\n    object        : 'tag',\n    aspect        : 'media',\n    object_id     : tag,\n    callback_url  : this.callback_url\n  };\n  request.post(url, { form : data }, this.subscribe_handler);\n};\n\n/**\n * Subscribe to Location by ID\n * Send an HTTP POST-request to the Instagram API, requesting a realtime\n * subscription to a specific, location via ID.\n * @param {string} id an identification string for a particular location\n * @return {undefined} undefined\n */\nSubscriptionManager.prototype.subscribe_location = function (id) {\n  'use strict';\n  var url = 'https://api.instagram.com/v1/subscriptions/';\n  var data = {\n    client_id     : this.client_id,\n    client_secret : this.client_secret,\n    object        : 'location',\n    aspect        : 'media',\n    object_id     : id,\n    callback_url  : this.callback_url\n  };\n  request.post(url, { form : data }, this.subscribe_handler);\n};\n\n/**\n * Subscribe to a Longitude-Latitude Coordinate\n * Send an HTTP POST-request to the Instagram API, requesting a realtime\n * subscription to a specific, longitude-latitude coordinate with a radius.\n * @param {string} id an identification string for a particular location\n * @param {object} pos an object containing 3 numeric properties:\n * \"lng\", longitude coordinate, \"lat\", latitude coordinate, and \"rad\", the radius\n * @return {undefined} undefined\n */\nSubscriptionManager.prototype.subscribe_geography = function (lat, lng, rad) {\n  lng = typeof lng === 'number' ? lng : 10;\n  lat = typeof lat === 'number' ? lat : 10;\n  rad = typeof rad === 'number' && rad >= 0 ? rad : 1000;\n  var url = 'https://api.instagram.com/v1/subscriptions/';\n  var data = {\n    client_id     : this.client_id,\n    client_secret : this.client_secret,\n    object        : 'geography',\n    aspect        : 'media',\n    lat           : lat,\n    lng           : lng,\n    radius        : rad,\n    callback_url  : this.callback_url\n  };\n  request.post(url, { form : data }, this.subscribe_handler);\n};\n\n/**\n * Delete Subscriptions\n * Sends a DELETE HTTP-Request with client information to Instagram API. This\n * cancels a specific media subscription, if \"id\" is an identifier.\n * If \"id\" is \"all or undefined, all subscriptions are cancelled.\n * @param {number or string} id a number of string representing the subscription\n * to cancel\n * @return {undefined} undefined\n */\nSubscriptionManager.prototype.unsubscribe = function (id) {\n  'use strict';\n  id = typeof id !== 'undefined' ? id : 'all';\n  var url = 'https://api.instagram.com/v1/subscriptions';\n  url += '?client_secret='  + this.client_secret;\n  url += '&client_id='      + this.client_id;\n  url += '&object='         + id;\n  request.del(url, this.unsubscribe_handler);\n};\n\n// ...\nmodule.exports = SubscriptionManager;\n","/home/travis/build/npmtest/node-npmtest-instagram-realtime/node_modules/instagram-realtime/libs/MediaFetcher.js":"var request = require('request');\n\n/**\n * MediaFetcher\n * Helps with pulling new media\n */\nfunction MediaFetcher (params) {\n  var self = this;\n  self.parent = params.parent;\n  self.server = params.server;\n  self.client_id      = params.client_id;\n  self.client_secret  = params.client_secret;\n  self.callback_url   = params.callback_url;\n\n  // Request Media Handler\n  self.request_media_handler = function (error, resp, body) {\n    if (resp.statusCode === 200) {\n      self.parent.emit('new', resp, body);\n      self.parent.last.response = resp;\n      self.parent.last.body     = body;\n      self.parent.last_body     = body;\n    }\n    else {\n      self.parent.emit('new/error', resp, body);\n    }\n  };\n}\n\n/**\n * Get New Media Created by a User\n * Sends an\n */\nMediaFetcher.prototype.get_user = function (id) {\n  if (typeof id !== 'string') {\n    console.log('User search must have id\\'s');\n  }\n\n  var url = 'https://api.instagram.com/v1';\n  url += '/users/' + id;\n  url += '/media/recent';\n  url += '?client_id='  + this.client_id;\n\n  request.get(url, this.request_media_handler);\n};\n\nMediaFetcher.prototype.get_tag = function (tag) {\n  var url = 'https://api.instagram.com/v1';\n  url += '/tags/' + tag;\n  url += '/media/recent';\n  url += '?client_id='  + this.client_id;\n\n  request.get(url, this.request_media_handler);\n};\n\nMediaFetcher.prototype.get_location = function (id) {\n  var url = 'https://api.instagram.com/v1';\n  url += '/locations/' + id;\n  url += '/media/recent';\n  url += '?client_id='  + this.client_id;\n\n  request.get(url, this.request_media_handler);\n};\n\nMediaFetcher.prototype.get_geography = function (id) {\n  var url = 'https://api.instagram.com/v1';\n  url += '/geographies/' + id;\n  url += '/media/recent';\n  url += '?client_id='  + this.client_id;\n\n  request.get(url, this.request_media_handler);\n};\n\nmodule.exports = MediaFetcher;\n"}